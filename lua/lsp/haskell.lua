require("lspconfig").hls.setup({
	on_attach = ON_ATTACH,
	capabilities = CAPABILITIES,
	flags = FLAGS,

	root_dir = NVIM_LSP.util.root_pattern(".git", "*.cabal", "stack.yaml", "cabal.project", "package.yaml", "hie.yaml"),
	--cmd = { "haskell-language-server-wrapper", "--lsp" },
	--filetypes = { "haskell", "lhaskell" },
	--lspinfo = function on_stdout(_, data, _)
	--local version = data[1]
	--table.insert(extra, 'version:   ' .. version)
	--end
	--local opts = {
	--cwd = cfg.cwd,
	--stdout_buffered = true,
	--on_stdout = on_stdout,
	--}
	--local chanid = vim.fn.jobstart({ cfg.cmd[1], '--version' }, opts)
	--vim.fn.jobwait { chanid }
	--return extra
	--end,
	--settings = {
	--haskell = {
	--formattingProvider = "ormolu",
	--},
	--},
	--init_options = {
	--languageServerHaskell = {
	--hlintOn = bool;
	--maxNumberOfProblems = number;
	--diagnosticsDebounceDuration = number;
	--liquidOn = bool (default false);
	--completionSnippetsOn = bool (default true);
	--formatOnImportOn = bool (default true);
	--formattingProvider = string (default "brittany", alternate "floskell");
	--}
	--}
	--haskell = {
	--checkProject = true, -- boolean Default: true Whether to typecheck the entire project on load. It could drive to bad perfomance in large projects.
	--formattingProvider = "ormolu", -- enum { "brittany", "floskell", "fourmolu", "ormolu", "stylish-haskell", "none" } Default: "ormolu" The formatter to use when formatting a document or range. Ensure the plugin is enabled.
	--logFile = "", -- string Default: "" If set, redirects the logs to a file.
	--maxCompletions = 40, -- integer Default: 40 Maximum number of completions sent to the editor.
	--openDocumentationInHackage = true, -- boolean Default: true When opening 'Documentation' for external libraries, open in hackage by default. Set to false to instead open in vscode.
	--openSourceInHackage = true, -- boolean Default: true When opening 'Source' for external libraries, open in hackage by default. Set to false to instead open in vscode.
	--plugin = {
	--class = { globalOn = true }, -- boolean Default: true Enables type class plugin
	--eval = { globalOn = true }, -- boolean Default: true Enables eval plugin
	--["ghcide-completions"] = {
	--config = {
	--autoExtendOn = true, -- boolean Default: true null
	--snippetsOn = true, -- boolean Default: true null
	--},
	--["ghcide-type-lenses"] = {
	--config = {
	--mode = true, -- enum { "always", "exported", "diagnostics" } Default: true Control how type lenses are shown
	--},
	--globalOn = true,
	---- boolean Default: true Enables type lenses plugin
	--},
	--},

	--haddockComments = { globalOn = true }, -- boolean Default: true Enables haddock comments plugin
	--hlint = {
	--codeActionsOn = true, -- boolean Default: true Enables hlint code actions (apply hints)
	--config = {
	--flags = {}, -- array Default: {} null
	--},
	--diagnosticsOn = true, -- boolean Default: true Enables hlint diagnostics
	--},
	--importLens = {
	--codeActionsOn = true, -- boolean Default: true Enables explicit imports code actions
	--codeLensOn = true,   -- boolean Default: true Enables explicit imports code lenses
	--},
	--moduleName = { globalOn = true }, -- boolean Default: true Enables module name plugin
	--pragmas = {
	--codeActionsOn = true, -- boolean Default: true Enables pragmas code actions
	--completionOn = true, -- boolean Default: true Enables pragmas completions
	--},
	--refineImports = { globalOn = true }, -- boolean Default: true Enables refine imports plugin
	--retrie = { globalOn = true }, -- boolean Default: true Enables retrie plugin
	--splice = { globalOn = true }, -- boolean Default: true Enables splice plugin (expand template haskell definitions)
	--tactics = {
	--config = {
	--auto_gas = 4, -- integer Default: 4 null
	--hole_severity = vim.NIL, -- enum { 1, 2, 3, 4, vim.NIL } Default: vim.NIL The severity to use when showing hole diagnostics.
	--max_use_ctor_actions = 5, -- integer Default: 5 null
	--proofstate_styling = true, -- boolean Default: true null
	--timeout_duration = 2, -- integer Default: 2 null
	--},
	--globalOn = true, -- boolean Default: true Enables Wingman (tactics) plugin
	--},
	--},

	--releasesDownloadStoragePath = "", -- string Default: "" null
	--releasesURL = "", -- string Default: "" An optional URL to override where to check for haskell-language-server releases
	--serverEnvironment = vim.empty_dict(), -- object Default: vim.empty_dict() null
	--serverExecutablePath = "", -- string Default: "" null
	--serverExtraArgs = "", -- string Default: "" null
	--trace = {
	--client = "info", -- enum { "off", "error", "info", "debug" } Default: "info" Sets the log level in the client side.
	--server = "off", -- enum { "off", "messages" } Default: "off" Traces the communication between VS Code and the language server.
	--},
	--updateBehavior = "keep-up-to-date", -- enum { "keep-up-to-date", "prompt", "never-check" } Default: "keep-up-to-date" null
	--},
})
