{
	"Yew class": {
		"prefix": "class",
		"body": ["class={classes!(\"$1\".to_owned())}"]
	},

	"New Yew function component": {
		"prefix": "yewfc",
		"body": [
			"#[derive(PartialEq, Properties)]",
			"pub struct ${1:ComponentName}Props {}",
			"",
			"#[function_component]",
			"pub fn $1(props: &${1}Props) -> Html {",
			"\tlet ${1}Props {} = props;",
			"\thtml! {",
			"\t\t<${2:div}>$0</${2}>",
			"\t}",
			"}"
		],
		"description": "Create a minimal Yew function component"
	},

	"New Yew struct component": {
		"prefix": "yewsc",
		"body": [
			"pub struct ${1:ComponentName};",
			"",
			"pub enum ${1}Msg {",
			"}",
			"",
			"impl Component for ${1} {",
			"\ttype Message = ${1}Msg;",
			"\ttype Properties = ();",
			"",
			"\tfn create(ctx: &Context<Self>) -> Self {",
			"\t\tSelf",
			"\t}",
			"",
			"\tfn view(&self, ctx: &Context<Self>) -> Html {",
			"\t\thtml! {",
			"\t\t\t$0",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Create a new Yew component with a message enum"
	},

	"use_sfml": {
		"prefix": "use_sfml",
		"description": "SFML BASIC",
		"body": [
			"use sfml::graphics::*;",
			"use sfml::system::*;",
			"use sfml::window::*;",
			"",
			"fn main() {",
			"\tlet width: u32 = 720;",
			"\tlet height: u32 = 480;",
			"\tlet bits_per_pixel: u32 = 32;",
			"\tlet fps: u32 = 10;",
			"",
			"\tlet title: &str = \"$1\";",
			"",
			"\t// let font = Font::from_file(\"./content/arial.ttf\");",
			"",
			"\tlet video_mode: VideoMode = VideoMode::new(width, height, 32);",
			"\tlet mut window: RenderWindow =",
			"\t\tRenderWindow::new(video_mode, title, Style::CLOSE, &Default::default());",
			"",
			"\twindow.set_framerate_limit(fps);",
			"",
			"\twhile window.is_open() {",
			"\t\twhile let Some(event) = window.poll_event() {",
			"\t\t\tmatch event {",
			"\t\t\t\tEvent::Closed => window.close(),",
			"",
			"\t\t\t\tEvent::KeyPressed {",
			"\t\t\t\t\tcode, ..",
			"\t\t\t\t} => match code {",
			"\t\t\t\t\tKey::ESCAPE => window.close(),",
			"\t\t\t\t\t_ => {},",
			"\t\t\t\t},",
			"",
			"\t\t\t\t_ => {},",
			"\t\t\t}",
			"\t\t}",
			"\t\twindow.clear(Color::BLACK);",
			"",
			"\t\twindow.display();",
			"\t}",
			"}"
		]
	},
	"use_sfml+": {
		"prefix": "use_sfml+",
		"description": "SFML WITH VIEW RESIZING",
		"body": [
			"use sfml::graphics::*;",
			"use sfml::system::*;",
			"use sfml::window::*;",
			"",
			"fn main() {",
			"\tlet width: u32 = 720;",
			"\tlet height: u32 = 480;",
			"\tlet bits_per_pixel: u32 = 32;",
			"",
			"\tlet fps: u32 = 10;",
			"\tlet vsync: bool = false;",
			"",
			"\tlet mut delta_time : f32 = 0.0;",
			"",
			"\tlet title: &str = \"$1\";",
			"",
			"\t// let font = Font::from_file(\"./content/arial.ttf\");",
			"",
			"\tlet video_mode: VideoMode = VideoMode::new(width, height, bits_per_pixel);",
			"\tlet mut window: RenderWindow =",
			"\t\tRenderWindow::new(video_mode, title, Style::CLOSE, &Default::default());",
			"",
			"\tif vsync {",
			"\t\twindow.set_vertical_sync_enabled(true);",
			"\t} else {",
			"\t\twindow.set_framerate_limit(fps);",
			"\t}",
			"",
			"\tlet mut view = View::new(",
			"\t\tVector2f {",
			"\t\t\tx: 0.0, y: 0.0",
			"\t\t},",
			"\t\tVector2 {",
			"\t\t\tx: width as f32,",
			"\t\t\ty: height as f32,",
			"\t\t},",
			"\t);",
			"",
			"\tlet mut clock: Clock = Clock::start();",
			"",
			"\tlet mut rect: RectangleShape = RectangleShape::new();",
			"\trect.set_position(Vector2f::new(100.0, 100.0));",
			"\trect.set_size(Vector2f::new(100.0, 100.0));",
			"\trect.set_fill_color(Color::RED);",
			"",
			"\twhile window.is_open() {",
			"\t\tdelta_time = clock.restart().as_seconds();",
			"",
			"\t\twhile let Some(event) = window.poll_event() {",
			"\t\t\tmatch event {",
			"\t\t\t\tEvent::Closed => window.close(),",
			"",
			"\t\t\t\tEvent::KeyPressed {",
			"\t\t\t\t\tcode, ..",
			"\t\t\t\t} => match code {",
			"\t\t\t\t\tKey::ESCAPE => window.close(),",
			"\t\t\t\t\t_ => {},",
			"\t\t\t\t},",
			"",
			"\t\t\t\tEvent::Resized {",
			"\t\t\t\t\twidth,",
			"\t\t\t\t\theight,",
			"\t\t\t\t} => view.set_size(Vector2f {",
			"\t\t\t\t\tx: width as f32,",
			"\t\t\t\t\ty: height as f32,",
			"\t\t\t\t}),",
			"",
			"\t\t\t\t_ => {},",
			"\t\t\t}",
			"\t\t}",
			"",
			"\t\twindow.set_view(&view);",
			"\t\twindow.clear(Color::BLACK);",
			"",
			"\t\twindow.draw(&rect);",
			"",
			"\t\twindow.display();",
			"\t}",
			"}"
		]
	},
	"extern crate": {
		"prefix": "extern crate",
		"body": ["extern crate ${1:name};"],
		"description": "Insert extern crate"
	},
	"for": {
		"prefix": "for",
		"body": ["for ${1:elem} in ${2:iter} {", "\t$0", "}"],
		"description": "Insert for loop"
	},
	"macro_rules": {
		"prefix": "macro_rules",
		"body": ["macro_rules! $1 {", "\t($2) => {", "\t\t$0", "\t};", "}"],
		"description": "Insert macro_rules!"
	},
	"if let": {
		"prefix": "if let",
		"body": ["if let ${1:pattern} = ${2:value} {", "\t$3", "}"],
		"description": "Insert if to match a specific pattern, useful for enum variants e.g. `Some(inner)`"
	},
	"spawn": {
		"prefix": ["thread_spawn", "spawn"],
		"body": ["std::thread::spawn(move || {", "\t$1", "})"],
		"description": "Wrap code in thread::spawn"
	},
	"derive": {
		"prefix": "derive",
		"body": ["#[derive(${1})]"],
		"description": "#[derive(…)]"
	},
	"cfg": {
		"prefix": "cfg",
		"body": ["#[cfg(${1})]"],
		"description": "#[cfg(…)]"
	},
	"test": {
		"prefix": "test",
		"body": [
			"#[test]",
			"fn ${1:name}() {",
			"    ${2:unimplemented!();}",
			"}"
		],
		"description": "#[test]"
	}
}
